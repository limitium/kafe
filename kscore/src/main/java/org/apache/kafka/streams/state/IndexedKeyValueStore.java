/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.kafka.streams.state;

import org.apache.kafka.streams.state.internals.IndexedKeyValueStoreBuilder;

import java.util.function.Function;
import java.util.stream.Stream;

/**
 * A key-value store that supports put/get/delete, range queries and uniq index lookup.
 *
 * @param <K> The key type
 * @param <V> The value type
 */
public interface IndexedKeyValueStore<K, V> extends KeyValueStore<K, V> {
    /**
     * Update value the value associated with this key.
     *
     * @param key   The key to associate the value to
     * @param value The value to update, it can be {@code null};
     *              if the serialized bytes are also {@code null} it is interpreted as deletes
     * @throws NullPointerException if {@code null} is used for key
     * @throws UniqKeyViolationException if new generated indexKey already exists in index and saved key i different from the new key. Indexes and underlying store shouldn't be affected.
     */
    @Override
    void put(K key, V value);

    /**
     * Get the value from the index by the {@code indexKey}
     *
     * @param indexName index name which was used in {@link IndexedKeyValueStoreBuilder#addUniqIndex(String, Function)}
     * @param indexKey  index key which was generated by {@link IndexedKeyValueStoreBuilder#addUniqIndex(String, Function)} function
     * @return value from original {@link KeyValueStore}
     */
    V getUnique(String indexName, String indexKey);

    /**
     * Get {@code key} from the index by {@code indexKey}. No interaction with an underlying store.
     *
     * @param indexName index name which was used in {@link IndexedKeyValueStoreBuilder#addUniqIndex(String, Function)}
     * @param indexKey index key which was generated by {@link IndexedKeyValueStoreBuilder#addUniqIndex(String, Function)} function
     * @return
     */
    K getUniqKey(String indexName, String indexKey);
    /**
     * Get the stream of values from the index by the {@code indexKey}
     *
     * @param indexName index name which was used in {@link IndexedKeyValueStoreBuilder#addNonUniqIndex(String, Function)}
     * @param indexKey  index key which was generated by {@link IndexedKeyValueStoreBuilder#addNonUniqIndex(String, Function)} function
     * @return value from original {@link KeyValueStore}
     */
    Stream<V> getNonUnique(String indexName, String indexKey);
}